{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","api_key","url","city","dataObject","cityName","weatherType","currentTemp","minTemp","maxTemp","searchCity","event","setState","target","value","getweatherData","a","endpoint","axios","get","response","console","log","data","fillData","toCelsius","temp","toFixed","celsiusCurrent","main","celsiusMin","temp_min","celsiusMax","temp_max","name","weather","class","type","id","this","placeholder","onChange","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAmGeA,G,kNA3FbC,MAAQ,CACNC,QAAS,mCACTC,IAAK,kDACLC,KAAM,GACNC,WAAY,GACZC,SAAU,OACVC,YAAa,OACbC,YAAa,WACbC,QAAS,WACTC,QAAS,Y,EAGXC,WAAc,SAACC,GACb,EAAKC,SAAS,CACZT,KAAMQ,EAAME,OAAOC,S,EAIvBC,e,sBAAiB,gCAAAC,EAAA,6DACXC,EADW,UACI,EAAKjB,MAAME,IADf,cACwB,EAAKF,MAAMG,KADnC,kBACiD,EAAKH,MAAMC,QAD5D,4BAEMiB,IAAMC,IAAIF,GAFhB,OAEXG,EAFW,OAGfC,QAAQC,IAAIF,GAERG,EAAOH,EAASG,KACpBF,QAAQC,IAAIC,GAEZ,EAAKX,SAAS,CACZR,WAAYmB,IAGdF,QAAQC,IAAI,EAAKtB,MAAMI,YAEvB,EAAKoB,WAdU,4C,EAiBjBC,UAAY,SAACC,GAGb,OAFyB,EAAE,GAAdA,EAAO,KACEC,QAAQ,I,EAI9BH,SAAW,WAET,IAAII,EAAiB,EAAKH,UAAU,EAAKzB,MAAMI,WAAWyB,KAAKH,MAC3DI,EAAa,EAAKL,UAAU,EAAKzB,MAAMI,WAAWyB,KAAKE,UACvDC,EAAa,EAAKP,UAAU,EAAKzB,MAAMI,WAAWyB,KAAKI,UAE3D,EAAKrB,SAAS,CACZP,SAAU,EAAKL,MAAMI,WAAW8B,KAChC5B,YAAa,EAAKN,MAAMI,WAAW+B,QAAQ,GAAGN,KAC9CtB,YAAaqB,EACbpB,QAASsB,EACTrB,QAASuB,K,uDAOX,OACE,sBAAKI,MAAQ,OAAb,UACE,oBAAIA,MAAQ,SAAZ,uBAEA,sBAAKA,MAAQ,eAAb,UACE,uBAAOC,KAAO,OAAOC,GAAK,UAAUxB,MAASyB,KAAKvC,MAAMG,KAAMqC,YAAc,yBAAyBC,SAAYF,KAAK7B,aACtH,wBAAQ4B,GAAK,QAAQI,QAAWH,KAAKxB,eAArC,sBAKF,qBAAKqB,MAAQ,UAAb,SACE,sBAAKA,MAAQ,UAAb,UACE,qBAAKA,MAAQ,WAAb,SAAyBG,KAAKvC,MAAMK,WACpC,sBAAK+B,MAAQ,kBAAb,UACE,oBAAIA,MAAQ,cAAZ,SAA2BG,KAAKvC,MAAMM,cACtC,qBAAI8B,MAAQ,cAAZ,UACI,+CAAkBG,KAAKvC,MAAMO,YAA7B,UACA,sDAAyBgC,KAAKvC,MAAMQ,QAApC,UACA,uDAA0B+B,KAAKvC,MAAMS,QAArC,4B,GAhFAkC,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef5d38a1.chunk.js","sourcesContent":["//import { render } from '@testing-library/react';\nimport axios from 'axios'\nimport React from 'react'\nimport './App.css';\n\n\nclass App extends React.Component{\n\n  state = {\n    api_key: 'fd7205e566330a9390744831f90972ea',\n    url: \"https://api.openweathermap.org/data/2.5/weather\",\n    city: '',\n    dataObject: {},\n    cityName: '----',\n    weatherType: '----',\n    currentTemp: '--.-°',\n    minTemp: '--.-°',\n    maxTemp: '--.-°'\n  }\n \n  searchCity =  (event) => {\n    this.setState({\n      city: event.target.value,\n    })\n  }\n\n  getweatherData = async () => {\n    let endpoint =  `${this.state.url}?q=${this.state.city}&appid=${this.state.api_key}&units=imperial`\n    let response = await axios.get(endpoint)\n    console.log(response)\n\n    let data = response.data;\n    console.log(data)\n\n    this.setState({\n      dataObject: data\n    })\n    \n    console.log(this.state.dataObject)\n\n    this.fillData();\n  }\n\n  toCelsius = (temp) => {\n    let ans = (temp - 32)*(5/9);\n    let final_ans = ans.toFixed(1);\n  return final_ans\n  }\n  \n  fillData = () => {\n\n    let celsiusCurrent = this.toCelsius(this.state.dataObject.main.temp)\n    let celsiusMin = this.toCelsius(this.state.dataObject.main.temp_min)\n    let celsiusMax = this.toCelsius(this.state.dataObject.main.temp_max)\n\n    this.setState({\n      cityName: this.state.dataObject.name,\n      weatherType: this.state.dataObject.weather[0].main,\n      currentTemp: celsiusCurrent,\n      minTemp: celsiusMin,\n      maxTemp: celsiusMax,\n    })\n    \n  }\n  \n\n  render(){\n    return(\n      <div class = 'main'>\n        <h1 class = 'banner'> Weather </h1>\n            \n        <div class = 'interactions'>\n          <input type = 'text' id = 'textbar' value = {this.state.city} placeholder = \"Search city or country\" onChange = {this.searchCity}></input>\n          <button id = 'check' onClick = {this.getweatherData}>Check</button>\n        </div>\n\n        \n\n        <div class = 'outcome'>\n          <div class = 'display'>\n            <div class = 'cityName'>{this.state.cityName}</div>\n            <div class = 'weatherContents'>\n              <h1 class = 'weatherType'>{this.state.weatherType}</h1>\n              <ul class = 'temperature'>\n                  <li>Temperature: {this.state.currentTemp}°</li>\n                  <li>Lowest Temperature: {this.state.minTemp}°</li>\n                  <li>Highest Temperature: {this.state.maxTemp}°</li>\n              </ul>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}